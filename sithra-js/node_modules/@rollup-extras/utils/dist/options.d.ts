import { DefaultsFactory, Result, SimpleOptions } from './types';
export declare function getOptions<T extends string | string[] | undefined | Record<string, unknown> | Record<string, unknown>[], D, F extends DefaultsFactory<Partial<{
    [K in C]: string[];
}> & Partial<Exclude<T, SimpleOptions>>>, C extends string>(options: T | undefined, defaults: D | undefined, field: C, factory?: F): Partial<{ [K in C]: string[]; }> & Partial<Exclude<T, SimpleOptions>> & { [key in keyof F]: F[key] extends (options: Partial<Partial<{ [K in C]: string[]; }> & Partial<Exclude<T, SimpleOptions>>>, field: string) => unknown ? ReturnType<F[key]> : unknown; } & D;
export declare function getOptionsObject<T extends {
    [key: string]: unknown;
}, D, F extends DefaultsFactory<T>>(options: T, defaults?: D, factory?: F): Result<T, F> & D;
