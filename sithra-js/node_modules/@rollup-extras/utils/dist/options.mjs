function getOptions(options, defaults, field, factory) {
    const newOptions = recursiveArrayOptions(options, field);
    return getOptionsObject((newOptions ? newOptions : options), defaults, factory);
}
function recursiveArrayOptions(options, field) {
    if (typeof options === 'string') {
        return { [field]: [options] };
    }
    else if (Array.isArray(options)) {
        return { [field]: options };
    }
    else if (typeof options === 'object') {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return field in options ? { ...options, ...recursiveArrayOptions(options[field], field) } : options;
    }
    console.warn(`cannot process options: '${options}', reverting to defaults`);
}
function getOptionsObject(options, defaults, factory) {
    const result = { ...defaults, ...options };
    if (factory) {
        for (const [k, v] of Object.entries(factory)) {
            result[k] = v(result, k);
        }
    }
    return result;
}

export { getOptions, getOptionsObject };
