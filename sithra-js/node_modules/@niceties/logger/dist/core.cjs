'use strict';

var globalAppender = require('./global-appender.cjs');

let globalInputId = 0;
const getOptions = (options) => {
    let parentId, tag;
    if (options.length === 1) {
        if (typeof options[0] === 'string') {
            tag = options[0];
        }
        else {
            parentId = options[0]?.id;
        }
    }
    else if (options.length === 2) {
        tag = options[0];
        parentId = options[1]?.id;
    }
    return { parentId, tag };
};
const createLogger = (...args) => {
    let initialLogLevel = 1 /* LogLevel.info */;
    let myAppender = (message) => { globalAppender.globalAppender && globalAppender.globalAppender(message); };
    const inputId = globalInputId++;
    const { tag, parentId } = getOptions(args);
    const append = (message, action, loglevel, context) => {
        myAppender && myAppender({
            action,
            inputId,
            message,
            loglevel,
            tag,
            parentId,
            ref,
            context
        });
    };
    const loggerInstance = Object.assign((message, loglevel = 1 /* LogLevel.info */, context) => {
        append(message, 3 /* Action.log */, loglevel, context);
    }, {
        // Fine to be started multiple times
        start(message, loglevel, context) {
            if (loglevel !== undefined) {
                initialLogLevel = loglevel;
            }
            append(message, 0 /* Action.start */, initialLogLevel, context);
        },
        // Fine to be updated multiple times
        update(message, loglevel, context) {
            append(message, 1 /* Action.update */, loglevel ?? initialLogLevel, context);
        },
        // Fine to be finished multiple times
        finish(message, loglevel, context) {
            append(message, 2 /* Action.finish */, loglevel ?? initialLogLevel, context);
        },
        appender(appender) {
            if (appender !== undefined) {
                myAppender = appender;
            }
            return myAppender;
        }
    });
    Object.defineProperty(loggerInstance, 'id', {
        value: inputId,
        writable: false
    });
    const ref = new WeakRef(loggerInstance);
    return loggerInstance;
};

exports.createLogger = createLogger;
